



Packet structure:
	1.  struct Header
	2.  char[packet_size] Data


Header structure:
	1.  int seq_num
	2.  int type



Required header types:
	1.  syn			(used by client to initiate connection)
	2.  wait		(sent to client to indicate  it is queued)
	3.  go/send		(sent to client to begin transmission)
	4.  data		(used by client to indicate a data packet)
	5.  finish		(used by client to indicate end of file)
	6.  ack/nack		(sent to client)



Receive window:



Sender:


To initiate:

send syn packet, set timer, wait for response or timer fires
if timer fires:
	resend syn

elif receive response:
	if response == wait:
		wait()
		resend

	elif response == go:
		senddata()


To send data:

read data from file (data_packet_size * window_size) into buffers, craft packets
send all packets in window
wait for response, set timer
if timer fires: reinitiate connection
elif receive ack/nack from receiver

if naks: 
	1) resend packets
	2) wait for ack/nak

else:
	1) update window
	2) repeat senddata()



To close connection:

send finish, set timer
if receive finack:
	shutdown
elif timer fires:
	resend fin






Receiver:


To establish connection:

Receives syn packet:
if receiver is busy:
	send wait packet

else: send go packet, build connection


To receive data:


Queues all packets in a temporary buffer for processing:

if ! seq_num in window: discard

elif seq_num in window: copy packet into buffer with appropriate index into window buffer, mark seq_num in window as received

check if all packets in window received:

if all received:
	a) send ack
	b) write buffer to file
	c) update window
	d) clear buffers

elif last packet in window received: send ack/nak

elif timer fires:
	if received seq_num in order:
		a) send ack
		b) write buffer to file
		c) update window
		d) clear buffers
		
	else:
		send ack/nak





To close connection:
if receive fin packet:
	close connection
	send finack




struct packet{
    struct header;
    char[PAYLOAD_SIZE];
}



struct packet_buffer[WINDOW_SIZE];


struc packet_buffer{
    int received;
    int seq_num;
    void * packet;
}



struct ack_payload{
    int ack;
    int num_nak;
    int * num_nacks;
}






